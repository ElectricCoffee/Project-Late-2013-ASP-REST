#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace REST_Service
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LærerbookingSystem")]
	public partial class BookingSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
	#region Extensibility Method Definitions
	partial void OnCreated();
	partial void InsertBruger(Bruger instance);
	partial void UpdateBruger(Bruger instance);
	partial void DeleteBruger(Bruger instance);
	partial void InsertLærer(Lærer instance);
	partial void UpdateLærer(Lærer instance);
	partial void DeleteLærer(Lærer instance);
	partial void InsertStuderende(Studerende instance);
	partial void UpdateStuderende(Studerende instance);
	partial void DeleteStuderende(Studerende instance);
	partial void InsertAdministrator(Administrator instance);
	partial void UpdateAdministrator(Administrator instance);
	partial void DeleteAdministrator(Administrator instance);
	#endregion
		
		public BookingSystemDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LærerbookingSystemConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BookingSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookingSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookingSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookingSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bruger> Brugers
		{
			get
			{
				return this.GetTable<Bruger>();
			}
		}
		
		public System.Data.Linq.Table<Lærer> Lærers
		{
			get
			{
				return this.GetTable<Lærer>();
			}
		}
		
		public System.Data.Linq.Table<Studerende> Studerendes
		{
			get
			{
				return this.GetTable<Studerende>();
			}
		}
		
		public System.Data.Linq.Table<Administrator> Administrators
		{
			get
			{
				return this.GetTable<Administrator>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bruger")]
	public partial class Bruger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int @__id;
		
		private string _Brugernavn;
		
		private string _Password;
		
		private int _Navn_id;
		
		private EntitySet<Lærer> _Lærers;
		
		private EntitySet<Studerende> _Studerendes;
		
		private EntitySet<Administrator> _Administrators;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void On_idChanging(int value);
	partial void On_idChanged();
	partial void OnBrugernavnChanging(string value);
	partial void OnBrugernavnChanged();
	partial void OnPasswordChanging(string value);
	partial void OnPasswordChanged();
	partial void OnNavn_idChanging(int value);
	partial void OnNavn_idChanged();
	#endregion
		
		public Bruger()
		{
			this._Lærers = new EntitySet<Lærer>(new Action<Lærer>(this.attach_Lærers), new Action<Lærer>(this.detach_Lærers));
			this._Studerendes = new EntitySet<Studerende>(new Action<Studerende>(this.attach_Studerendes), new Action<Studerende>(this.detach_Studerendes));
			this._Administrators = new EntitySet<Administrator>(new Action<Administrator>(this.attach_Administrators), new Action<Administrator>(this.detach_Administrators));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_id]", Storage="__id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int _id
		{
			get
			{
				return this.@__id;
			}
			set
			{
				if ((this.@__id != value))
				{
					this.On_idChanging(value);
					this.SendPropertyChanging();
					this.@__id = value;
					this.SendPropertyChanged("_id");
					this.On_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brugernavn", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Brugernavn
		{
			get
			{
				return this._Brugernavn;
			}
			set
			{
				if ((this._Brugernavn != value))
				{
					this.OnBrugernavnChanging(value);
					this.SendPropertyChanging();
					this._Brugernavn = value;
					this.SendPropertyChanged("Brugernavn");
					this.OnBrugernavnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Navn_id", DbType="Int NOT NULL")]
		public int Navn_id
		{
			get
			{
				return this._Navn_id;
			}
			set
			{
				if ((this._Navn_id != value))
				{
					this.OnNavn_idChanging(value);
					this.SendPropertyChanging();
					this._Navn_id = value;
					this.SendPropertyChanged("Navn_id");
					this.OnNavn_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bruger_Lærer", Storage="_Lærers", ThisKey="_id", OtherKey="Bruger_id")]
		public EntitySet<Lærer> Lærers
		{
			get
			{
				return this._Lærers;
			}
			set
			{
				this._Lærers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bruger_Studerende", Storage="_Studerendes", ThisKey="_id", OtherKey="Bruger_id")]
		public EntitySet<Studerende> Studerendes
		{
			get
			{
				return this._Studerendes;
			}
			set
			{
				this._Studerendes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bruger_Administrator", Storage="_Administrators", ThisKey="_id", OtherKey="Bruger_id")]
		public EntitySet<Administrator> Administrators
		{
			get
			{
				return this._Administrators;
			}
			set
			{
				this._Administrators.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lærers(Lærer entity)
		{
			this.SendPropertyChanging();
			entity.Bruger = this;
		}
		
		private void detach_Lærers(Lærer entity)
		{
			this.SendPropertyChanging();
			entity.Bruger = null;
		}
		
		private void attach_Studerendes(Studerende entity)
		{
			this.SendPropertyChanging();
			entity.Bruger = this;
		}
		
		private void detach_Studerendes(Studerende entity)
		{
			this.SendPropertyChanging();
			entity.Bruger = null;
		}
		
		private void attach_Administrators(Administrator entity)
		{
			this.SendPropertyChanging();
			entity.Bruger = this;
		}
		
		private void detach_Administrators(Administrator entity)
		{
			this.SendPropertyChanging();
			entity.Bruger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lærer")]
	public partial class Lærer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int @__id;
		
		private int _Bruger_id;
		
		private EntityRef<Bruger> _Bruger;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void On_idChanging(int value);
	partial void On_idChanged();
	partial void OnBruger_idChanging(int value);
	partial void OnBruger_idChanged();
	#endregion
		
		public Lærer()
		{
			this._Bruger = default(EntityRef<Bruger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_id]", Storage="__id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int _id
		{
			get
			{
				return this.@__id;
			}
			set
			{
				if ((this.@__id != value))
				{
					this.On_idChanging(value);
					this.SendPropertyChanging();
					this.@__id = value;
					this.SendPropertyChanged("_id");
					this.On_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bruger_id", DbType="Int NOT NULL")]
		public int Bruger_id
		{
			get
			{
				return this._Bruger_id;
			}
			set
			{
				if ((this._Bruger_id != value))
				{
					if (this._Bruger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBruger_idChanging(value);
					this.SendPropertyChanging();
					this._Bruger_id = value;
					this.SendPropertyChanged("Bruger_id");
					this.OnBruger_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bruger_Lærer", Storage="_Bruger", ThisKey="Bruger_id", OtherKey="_id", IsForeignKey=true)]
		public Bruger Bruger
		{
			get
			{
				return this._Bruger.Entity;
			}
			set
			{
				Bruger previousValue = this._Bruger.Entity;
				if (((previousValue != value) 
							|| (this._Bruger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bruger.Entity = null;
						previousValue.Lærers.Remove(this);
					}
					this._Bruger.Entity = value;
					if ((value != null))
					{
						value.Lærers.Add(this);
						this._Bruger_id = value._id;
					}
					else
					{
						this._Bruger_id = default(int);
					}
					this.SendPropertyChanged("Bruger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Studerende")]
	public partial class Studerende : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int @__id;
		
		private byte _Godkendt;
		
		private int _Bruger_id;
		
		private int _Hold_id;
		
		private EntityRef<Bruger> _Bruger;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void On_idChanging(int value);
	partial void On_idChanged();
	partial void OnGodkendtChanging(byte value);
	partial void OnGodkendtChanged();
	partial void OnBruger_idChanging(int value);
	partial void OnBruger_idChanged();
	partial void OnHold_idChanging(int value);
	partial void OnHold_idChanged();
	#endregion
		
		public Studerende()
		{
			this._Bruger = default(EntityRef<Bruger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_id]", Storage="__id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int _id
		{
			get
			{
				return this.@__id;
			}
			set
			{
				if ((this.@__id != value))
				{
					this.On_idChanging(value);
					this.SendPropertyChanging();
					this.@__id = value;
					this.SendPropertyChanged("_id");
					this.On_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Godkendt", DbType="TinyInt NOT NULL")]
		public byte Godkendt
		{
			get
			{
				return this._Godkendt;
			}
			set
			{
				if ((this._Godkendt != value))
				{
					this.OnGodkendtChanging(value);
					this.SendPropertyChanging();
					this._Godkendt = value;
					this.SendPropertyChanged("Godkendt");
					this.OnGodkendtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bruger_id", DbType="Int NOT NULL")]
		public int Bruger_id
		{
			get
			{
				return this._Bruger_id;
			}
			set
			{
				if ((this._Bruger_id != value))
				{
					if (this._Bruger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBruger_idChanging(value);
					this.SendPropertyChanging();
					this._Bruger_id = value;
					this.SendPropertyChanged("Bruger_id");
					this.OnBruger_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hold_id", DbType="Int NOT NULL")]
		public int Hold_id
		{
			get
			{
				return this._Hold_id;
			}
			set
			{
				if ((this._Hold_id != value))
				{
					this.OnHold_idChanging(value);
					this.SendPropertyChanging();
					this._Hold_id = value;
					this.SendPropertyChanged("Hold_id");
					this.OnHold_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bruger_Studerende", Storage="_Bruger", ThisKey="Bruger_id", OtherKey="_id", IsForeignKey=true)]
		public Bruger Bruger
		{
			get
			{
				return this._Bruger.Entity;
			}
			set
			{
				Bruger previousValue = this._Bruger.Entity;
				if (((previousValue != value) 
							|| (this._Bruger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bruger.Entity = null;
						previousValue.Studerendes.Remove(this);
					}
					this._Bruger.Entity = value;
					if ((value != null))
					{
						value.Studerendes.Add(this);
						this._Bruger_id = value._id;
					}
					else
					{
						this._Bruger_id = default(int);
					}
					this.SendPropertyChanged("Bruger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrator")]
	public partial class Administrator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int @__id;
		
		private int _Bruger_id;
		
		private EntityRef<Bruger> _Bruger;
		
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void On_idChanging(int value);
	partial void On_idChanged();
	partial void OnBruger_idChanging(int value);
	partial void OnBruger_idChanged();
	#endregion
		
		public Administrator()
		{
			this._Bruger = default(EntityRef<Bruger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_id]", Storage="__id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int _id
		{
			get
			{
				return this.@__id;
			}
			set
			{
				if ((this.@__id != value))
				{
					this.On_idChanging(value);
					this.SendPropertyChanging();
					this.@__id = value;
					this.SendPropertyChanged("_id");
					this.On_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bruger_id", DbType="Int NOT NULL")]
		public int Bruger_id
		{
			get
			{
				return this._Bruger_id;
			}
			set
			{
				if ((this._Bruger_id != value))
				{
					if (this._Bruger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBruger_idChanging(value);
					this.SendPropertyChanging();
					this._Bruger_id = value;
					this.SendPropertyChanged("Bruger_id");
					this.OnBruger_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bruger_Administrator", Storage="_Bruger", ThisKey="Bruger_id", OtherKey="_id", IsForeignKey=true)]
		public Bruger Bruger
		{
			get
			{
				return this._Bruger.Entity;
			}
			set
			{
				Bruger previousValue = this._Bruger.Entity;
				if (((previousValue != value) 
							|| (this._Bruger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bruger.Entity = null;
						previousValue.Administrators.Remove(this);
					}
					this._Bruger.Entity = value;
					if ((value != null))
					{
						value.Administrators.Add(this);
						this._Bruger_id = value._id;
					}
					else
					{
						this._Bruger_id = default(int);
					}
					this.SendPropertyChanged("Bruger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
